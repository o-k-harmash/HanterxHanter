// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(EfCoreContext))]
    partial class EfCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Property<string>("CityId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("File", b =>
                {
                    b.Property<string>("FileId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("ProfileUserId")
                        .HasColumnType("uuid");

                    b.HasKey("FileId");

                    b.HasIndex("ProfileUserId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Gender", b =>
                {
                    b.Property<string>("GenderId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Interest", b =>
                {
                    b.Property<string>("InterestId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("InterestId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Language", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RelationshipGoalId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("SexualOrientationId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasKey("UserId");

                    b.HasIndex("RelationshipGoalId");

                    b.HasIndex("SexualOrientationId");

                    b.HasIndex("GenderId", "CityId", "Age");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("ProfileInterest", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("InterestId")
                        .HasColumnType("character varying(40)");

                    b.HasKey("ProfileId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("ProfileInterest");
                });

            modelBuilder.Entity("ProfileLanguage", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageId")
                        .HasColumnType("character varying(40)");

                    b.HasKey("ProfileId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ProfileLanguage");
                });

            modelBuilder.Entity("RelationshipGoal", b =>
                {
                    b.Property<string>("RelationshipGoalId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("RelationshipGoalId");

                    b.ToTable("RelationshipGoals");
                });

            modelBuilder.Entity("SexualOrientation", b =>
                {
                    b.Property<string>("SexualOrientationId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("SexualOrientationId");

                    b.ToTable("SexualOrientations");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.Property<string>("StateId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Translate", b =>
                {
                    b.Property<string>("ToTable")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("LangCode")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ToTable", "Key", "LangCode");

                    b.ToTable("Translates");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Avatar")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("User", null)
                        .WithOne("Address")
                        .HasForeignKey("Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("City", b =>
                {
                    b.HasOne("State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("File", b =>
                {
                    b.HasOne("Profile", null)
                        .WithMany("Files")
                        .HasForeignKey("ProfileUserId");
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.HasOne("RelationshipGoal", "RelationshipGoal")
                        .WithMany()
                        .HasForeignKey("RelationshipGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SexualOrientation", "SexualOrientation")
                        .WithMany()
                        .HasForeignKey("SexualOrientationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelationshipGoal");

                    b.Navigation("SexualOrientation");
                });

            modelBuilder.Entity("ProfileInterest", b =>
                {
                    b.HasOne("Interest", "Interest")
                        .WithMany("ProfileLinks")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile", "Profile")
                        .WithMany("InterestLinks")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ProfileLanguage", b =>
                {
                    b.HasOne("Language", "Language")
                        .WithMany("ProfileLinks")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile", "Profile")
                        .WithMany("LanguageLinks")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.HasOne("Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Interest", b =>
                {
                    b.Navigation("ProfileLinks");
                });

            modelBuilder.Entity("Language", b =>
                {
                    b.Navigation("ProfileLinks");
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("InterestLinks");

                    b.Navigation("LanguageLinks");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
